{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useDataRates = () => {\n  _s();\n\n  const [rates, setRates] = useState({\n    status: 'loading'\n  }); // Zaktualizowany link do API\n\n  const BASE_URL = 'https://api.exchangerate-api.com/v4/latest/PLN';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(BASE_URL);\n\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const data = await response.json(); // Pobieranie tylko kursów dla PLN i KRW\n\n        const filteredRates = {\n          PLN: data.rates.PLN,\n          KRW: data.rates.KRW\n        };\n        setRates({\n          rates: filteredRates,\n          date: data.date\n        });\n      } catch (error) {\n        setRates({\n          status: 'error'\n        });\n      }\n    };\n\n    setTimeout(fetchData, 1500);\n  }, []);\n  return rates;\n};\n\n_s(useDataRates, \"ZpA7cCkbJQz4UU5+f10s16WNUv0=\");\n\nexport default useDataRates;","map":{"version":3,"names":["useEffect","useState","useDataRates","rates","setRates","status","BASE_URL","fetchData","response","fetch","ok","Error","statusText","data","json","filteredRates","PLN","KRW","date","error","setTimeout"],"sources":["C:/Users/48535/cantor-react/src/Form/useDataRates.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useDataRates = () => {\r\n    const [rates, setRates] = useState({\r\n        status: 'loading',\r\n    });\r\n\r\n    // Zaktualizowany link do API\r\n    const BASE_URL = 'https://api.exchangerate-api.com/v4/latest/PLN';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(BASE_URL);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                // Pobieranie tylko kursów dla PLN i KRW\r\n                const filteredRates = {\r\n                    PLN: data.rates.PLN,\r\n                    KRW: data.rates.KRW,\r\n                };\r\n\r\n                setRates({\r\n                    rates: filteredRates,\r\n                    date: data.date,\r\n                });\r\n            } catch (error) {\r\n                setRates({\r\n                    status: 'error',\r\n                });\r\n            }\r\n        };\r\n\r\n        setTimeout(fetchData, 1500);\r\n    }, []);\r\n\r\n    return rates;\r\n};\r\n\r\nexport default useDataRates;\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC;IAC/BI,MAAM,EAAE;EADuB,CAAD,CAAlC,CADuB,CAKvB;;EACA,MAAMC,QAAQ,GAAG,gDAAjB;EAEAN,SAAS,CAAC,MAAM;IACZ,MAAMO,SAAS,GAAG,YAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAD,CAA5B;;QAEA,IAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;UACd,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;QACH;;QAED,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB,CAPA,CASA;;QACA,MAAMC,aAAa,GAAG;UAClBC,GAAG,EAAEH,IAAI,CAACV,KAAL,CAAWa,GADE;UAElBC,GAAG,EAAEJ,IAAI,CAACV,KAAL,CAAWc;QAFE,CAAtB;QAKAb,QAAQ,CAAC;UACLD,KAAK,EAAEY,aADF;UAELG,IAAI,EAAEL,IAAI,CAACK;QAFN,CAAD,CAAR;MAIH,CAnBD,CAmBE,OAAOC,KAAP,EAAc;QACZf,QAAQ,CAAC;UACLC,MAAM,EAAE;QADH,CAAD,CAAR;MAGH;IACJ,CAzBD;;IA2BAe,UAAU,CAACb,SAAD,EAAY,IAAZ,CAAV;EACH,CA7BQ,EA6BN,EA7BM,CAAT;EA+BA,OAAOJ,KAAP;AACH,CAxCD;;GAAMD,Y;;AA0CN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}