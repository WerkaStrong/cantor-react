{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useDataRates = () => {\n  _s();\n\n  const [rates, setRates] = useState({\n    status: 'loading',\n    rates: {},\n    date: null\n  }); // Link do Free Forex API z parametrami dla PLN\n\n  const BASE_URL = 'https://www.freeforexapi.com/api/live?pairs=PLNUSD,PLNEUR,PLNGBP';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Wysyłamy zapytanie do API\n        const response = await fetch(BASE_URL);\n\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        } // Parsujemy odpowiedź na JSON\n\n\n        const data = await response.json(); // Ustawiamy stan na podstawie odpowiedzi z API\n\n        setRates({\n          status: 'success',\n          rates: data.rates,\n          // W zależności od struktury odpowiedzi, tutaj zapisujemy kursy\n          date: new Date().toISOString() // Można dodać datę odpowiedzi\n\n        });\n      } catch (error) {\n        console.error('Fetch error:', error);\n        setRates({\n          status: 'error',\n          rates: null,\n          date: null\n        });\n      }\n    };\n\n    fetchData(); // Uruchomienie funkcji fetch\n  }, []); // Pusty array oznacza, że hook uruchomi się tylko raz po załadowaniu komponentu\n\n  return rates;\n};\n\n_s(useDataRates, \"1YSbU+1Pjty+x9QoVKpICSdVKBE=\");\n\nexport default useDataRates;","map":{"version":3,"names":["useEffect","useState","useDataRates","rates","setRates","status","date","BASE_URL","fetchData","response","fetch","ok","Error","statusText","data","json","Date","toISOString","error","console"],"sources":["C:/Users/48535/cantor-react/src/Form/useDataRates.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useDataRates = () => {\r\n    const [rates, setRates] = useState({\r\n        status: 'loading',\r\n        rates: {},\r\n        date: null,\r\n    });\r\n\r\n    // Link do Free Forex API z parametrami dla PLN\r\n    const BASE_URL =\r\n        'https://www.freeforexapi.com/api/live?pairs=PLNUSD,PLNEUR,PLNGBP';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Wysyłamy zapytanie do API\r\n                const response = await fetch(BASE_URL);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                // Parsujemy odpowiedź na JSON\r\n                const data = await response.json();\r\n\r\n                // Ustawiamy stan na podstawie odpowiedzi z API\r\n                setRates({\r\n                    status: 'success',\r\n                    rates: data.rates, // W zależności od struktury odpowiedzi, tutaj zapisujemy kursy\r\n                    date: new Date().toISOString(), // Można dodać datę odpowiedzi\r\n                });\r\n            } catch (error) {\r\n                console.error('Fetch error:', error);\r\n                setRates({\r\n                    status: 'error',\r\n                    rates: null,\r\n                    date: null,\r\n                });\r\n            }\r\n        };\r\n\r\n        fetchData(); // Uruchomienie funkcji fetch\r\n    }, []); // Pusty array oznacza, że hook uruchomi się tylko raz po załadowaniu komponentu\r\n\r\n    return rates;\r\n};\r\n\r\nexport default useDataRates;\r\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAG,MAAM;EAAA;;EACvB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC;IAC/BI,MAAM,EAAE,SADuB;IAE/BF,KAAK,EAAE,EAFwB;IAG/BG,IAAI,EAAE;EAHyB,CAAD,CAAlC,CADuB,CAOvB;;EACA,MAAMC,QAAQ,GACV,kEADJ;EAGAP,SAAS,CAAC,MAAM;IACZ,MAAMQ,SAAS,GAAG,YAAY;MAC1B,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAD,CAA5B;;QAEA,IAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;UACd,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;QACH,CAND,CAQA;;;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB,CATA,CAWA;;QACAX,QAAQ,CAAC;UACLC,MAAM,EAAE,SADH;UAELF,KAAK,EAAEW,IAAI,CAACX,KAFP;UAEc;UACnBG,IAAI,EAAE,IAAIU,IAAJ,GAAWC,WAAX,EAHD,CAG2B;;QAH3B,CAAD,CAAR;MAKH,CAjBD,CAiBE,OAAOC,KAAP,EAAc;QACZC,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B;QACAd,QAAQ,CAAC;UACLC,MAAM,EAAE,OADH;UAELF,KAAK,EAAE,IAFF;UAGLG,IAAI,EAAE;QAHD,CAAD,CAAR;MAKH;IACJ,CA1BD;;IA4BAE,SAAS,GA7BG,CA6BC;EAChB,CA9BQ,EA8BN,EA9BM,CAAT,CAXuB,CAyCf;;EAER,OAAOL,KAAP;AACH,CA5CD;;GAAMD,Y;;AA8CN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}